; définition de l'alphabet A et de l'arbre préfixe T
(declare-datatypes () ((A a b c) (T e ea eab eaba eb eba ebc ec eca)))

; les états de l'automate à trouver sont {0, 1, ..., n-1}
(define-sort Q () Int)
(declare-const n Q)
(assert (> n 0))

; fonction de transition de l'automate
(declare-fun delta (Q A) Q)
(assert (forall ((q Q) (a A))
(and (>= (delta q a) 0) (< (delta q a) n))))

; ensemble d'états acceptants de l'automate
(declare-fun final (Q) Bool)

; fonction des éléments de l'arbre préfixe vers les états
(declare-fun f (T) Q)
(assert (forall ((x T))
(and (>= (f x) 0) (< (f x) n))))

; contrainte sur l'état initial, donnée par l'équation (55)
; dans la section 16.3 des notes de cours
(assert (= 0 (f e)))

; contrainte sur les transitions, donnée par l'équation (56)
(assert (and 
           (= (f ea)  (delta (f e)  a))
           (= (f eab)  (delta (f ea)  b))
           (= (f eaba)  (delta (f eab)  a))
           (= (f eb)  (delta (f e)  b))
           (= (f eba)  (delta (f eb)  a))
           (= (f ebc)  (delta (f eb)  c))
           (= (f ec)  (delta (f e)  c))
           (= (f eca)  (delta (f ec)  a))))

; contrainte sur les états finaux, donnée par l'équation (57)
(assert (and (final (f ea))
             (final (f eaba))
             (final (f eba))
             (not(final (f ebc)))
             (not(final (f eca)))))
	     
(check-sat-using (then qe smt))

(get-model)

(exit)